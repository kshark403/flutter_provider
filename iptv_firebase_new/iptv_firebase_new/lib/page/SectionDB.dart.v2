// ignore_for_file: file_names

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:tv/app.dart';
import 'package:tv/manger/Section.dart';
import 'package:tv/manger/language.dart';
import 'package:tv/models/SectionModel.dart';
import 'package:tv/utils/utils.dart';
import 'package:tv/manger/user-type.dart';
import 'package:tv/models/loader.dart';
import 'package:tv/models/user-model.dart';
import 'package:tv/models/user_profile.dart';
import 'package:tv/page/notification.dart';
import 'package:tv/page/favorite_channelDB.dart';

import '../models/lang.dart';
import 'channelDB.dart';

// ignore: must_be_immutable
class SectionScreenDB extends StatefulWidget {
  @override
  _SectionScreenDBState createState() => _SectionScreenDBState();
  final Section section;
  final String screenTitle;
  bool searchMode = false;
  // ignore: use_key_in_widget_constructors
  SectionScreenDB(this.section, this.screenTitle);
}

class _SectionScreenDBState extends State<SectionScreenDB> {
  Language lang = Language.ENGLISH;
  final TextEditingController? searchTextField = TextEditingController();
  Widget? appBarTitle;
  @override
  void initState() {
    // #: implement initState
    super.initState();
    UserProfile.shared.getLanguage().then((value) {
      setState(() {
        appBarTitle = Text(
          AppLocalization.of(context)!.trans(widget.screenTitle),
          style: TextStyle(color: Theme.of(context).primaryColor),
        );
        lang = value!;
      });
    });
  }

  @override
  void dispose() {
    // #: implement dispose
    searchTextField!.dispose();
    super.dispose();
  }

  Icon actionIcon = const Icon(Icons.search);

  @override
  Widget build(BuildContext context) {
    //print("Inside section build 1");
    return FutureBuilder<UserModel?>(
        key: _scaffoldKey,
        future: UserProfile.shared.getUser(),
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            //print("enter 1 ");
            UserModel? user = snapshot.data;
            //print("enter 2 ");

            return Scaffold(
              appBar: AppBar(
                backgroundColor: Theme.of(context).canvasColor,
                elevation: 0,
                iconTheme: IconThemeData(
                  color: Theme.of(context).primaryColor,
                ),
                leading: IconButton(
                  icon: const Icon(
                    Icons.favorite,
                  ),
                  onPressed: () => Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (_) => FavoriteChannel(
                                widget.section.name,
                                widget.screenTitle,
                                section: widget.section.index,
                              ))),
                ),
                title: appBarTitle,
                centerTitle: true,
                actions: [
                  IconButton(
                    icon: actionIcon,
                    onPressed: () {
                      setState(() {
                        if (actionIcon.icon == Icons.search) {
                          actionIcon = const Icon(Icons.close);
                          appBarTitle = TextField(
                            controller: searchTextField,
                            onChanged: (value) {
                              searchTextField!.text = value;
                              searchTextField!.text.isEmpty
                                  ? widget.searchMode = false
                                  : widget.searchMode = true;
                              searchTextField!.selection =
                                  TextSelection.fromPosition(TextPosition(
                                      offset: searchTextField!.text.length));
                              setState(() {});
                            },
                            style: const TextStyle(
                              color: Colors.blue,
                            ),
                            decoration: const InputDecoration(
                                prefixIcon:
                                    Icon(Icons.search, color: Colors.blue),
                                hintText: "Search...",
                                hintStyle: TextStyle(color: Colors.blue)),
                          );
                        } else {
                          actionIcon = const Icon(Icons.search);
                          appBarTitle = Text(
                            AppLocalization.of(context)!
                                .trans(widget.screenTitle),
                            style: TextStyle(
                                color: Theme.of(context).primaryColor),
                          );
                        }
                      });
                    },
                  ),
                  if (!isFirebaseDown()) const NotificationsWidget(),
                  Visibility(
                    visible: user!.userType == UserType.ADMIN,
                    child: IconButton(
                        icon: Icon(Icons.add,
                            color: Theme.of(context).primaryColor),
                        onPressed: () {
                          showActionsheet();
                        }),
                  ),
                ],
              ),
              body: user.userType == UserType.ADMIN
                  // ? _widgetTech(context, searchTextField)
                  ? _widgetTechDB(context, searchTextField)
                  : _widgetTechDB(context, searchTextField),
            );
          }

          return const SizedBox();
        });
  }

  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey();

  Widget _widgetTechDB(context, searchController) {
    // return FutureBuilder<List<SectionModel>>(
    //     future: SectionProvider()
    //         .loadAllDataBySectionType(widget.section.index.toString()),
    return StreamBuilder<List<SectionModel>>(
        stream: sectionProvider.onSections(widget.section.index),
        builder: (context, snapshot) {
          print("Nooooooo");
          if (snapshot.hasData) {
            List<SectionModel>? section = snapshot.data;
            //print("widget.section.index.toString() is : " + widget.section.index.toString());
            //print("length of Section is : " + section!.length.toString());
            // print("section detail is : " + section.toString());
            if (widget.searchMode) {
              section = section!
                  .where((element) => element.titleEN
                      .toUpperCase()
                      .contains(searchController.text.toUpperCase()))
                  .toList();
            }
            if (section!.isEmpty) {
              return Center(
                  child: Text(
                "No  added",
                style: TextStyle(
                    color: Theme.of(context).primaryColor, fontSize: 18),
              ));
            }
            return ListView.builder(
                itemCount: section.length,
                itemBuilder: (item, index) {
                  return MaterialButton(
                    onPressed: () {
                      Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (_) => chanelsection(
                                    section![index].uid,
                                    lang == Language.ENGLISH
                                        ? section[index].titleEN
                                        : section[index].titleAR,
                                    section: widget.section.index,
                                  )));
                    },
                    child: Padding(
                      padding: const EdgeInsets.all(8),
                      child: Card(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: <Widget>[
                            Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: <Widget>[
                                IconButton(
                                  iconSize: 35,
                                  icon: const Icon(Icons.edit),
                                  // onPressed: () => Navigator.push(
                                  //     context,
                                  //     MaterialPageRoute(
                                  //         builder: (_) => addsection(
                                  //             updateSection: section![index]))),
                                  onPressed: () {},
                                ),
                                Expanded(
                                    child: Padding(
                                  padding: const EdgeInsets.all(8),
                                  child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: <Widget>[
                                        Text(
                                            lang == Language.ENGLISH
                                                ? section![index].titleEN
                                                : section![index].titleAR,
                                            style: TextStyle(
                                                color: Theme.of(context)
                                                    .primaryColor,
                                                fontSize: 18,
                                                fontWeight: FontWeight.w500)),
                                      ]),
                                )),
                                IconButton(
                                  iconSize: 35,
                                  icon: const Icon(Icons.delete_forever),
                                  onPressed: () {
                                    _deleteSection(
                                        context, section![index].uid);

                                    //To clear all file for temporay used
                                    // ChannelProvider().deleteAllData();
                                  },
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                  );
                });
          } else {
            return Center(
              child: loader(context),
            );
          }
        });
  }

  _deleteSection(context, id) {
    //print("going to delete section.");

    // SectionProvider().deleteTransaction(uidSection);
    // setState(() {});

    showDialog<String>(
      context: context,
      builder: (BuildContext context) => AlertDialog(
        title: const Text("Delete"),
        content: const Text("Are you sure to delete?"),
        actions: <Widget>[
          TextButton(
            onPressed: () async => {
              // await FirebaseManager.shared
              // .deleteSection(context, uidSection: uidSection),
              // await SectionProvider().deleteTransaction(uidSection),
              await sectionProvider.deleteNote(id),
              setState(() {}),
              Navigator.of(context).pop()
            },
            child: const Text("Delete"),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text("Close"),
          ),
        ],
      ),
    );
  }

  showActionsheet() {
    {
      showCupertinoModalPopup(
        context: context,
        builder: (BuildContext context) => CupertinoActionSheet(
            title: const Text('Choose An Option'),
            actions: <Widget>[
              CupertinoActionSheetAction(
                child: const Text('addsection'),
                onPressed: () => Navigator.pushNamed(context, '/addsection'),
              ),
              CupertinoActionSheetAction(
                child: const Text('addchannel'),
                isDestructiveAction: false,
                onPressed: () => Navigator.pushNamed(context, '/laddchannel'),
              )
            ],
            cancelButton: CupertinoActionSheetAction(
              child: const Text('Cancel'),
              onPressed: () {
                Navigator.pop(context, 'Cancel');
              },
            )),
      );
    }
  }
}
